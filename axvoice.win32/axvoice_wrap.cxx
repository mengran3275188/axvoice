/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_axvoice(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_axvoice(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_axvoice(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "AV_Interface.h"


#include <string>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "axvoice_wrap.h"

SwigDirector_AxVoiceMessage::SwigDirector_AxVoiceMessage() : AxVoiceMessage(), Swig::Director() {
  swig_init_callbacks();
}

AxVoiceMessage::Type SwigDirector_AxVoiceMessage::getType() const {
  AxVoiceMessage::Type c_result = SwigValueInit< AxVoiceMessage::Type >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetType) {
    throw Swig::DirectorPureVirtualException("AxVoiceMessage::getType");
  } else {
    jresult = (int) swig_callbackgetType();
    c_result = (AxVoiceMessage::Type)jresult; 
  }
  return c_result;
}

unsigned int SwigDirector_AxVoiceMessage::getVoiceID() const {
  unsigned int c_result = SwigValueInit< unsigned int >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackgetVoiceID) {
    throw Swig::DirectorPureVirtualException("AxVoiceMessage::getVoiceID");
  } else {
    jresult = (unsigned int) swig_callbackgetVoiceID();
    c_result = (unsigned int)jresult; 
  }
  return c_result;
}

int SwigDirector_AxVoiceMessage::getParamCounts() const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackgetParamCounts) {
    throw Swig::DirectorPureVirtualException("AxVoiceMessage::getParamCounts");
  } else {
    jresult = (int) swig_callbackgetParamCounts();
    c_result = (int)jresult; 
  }
  return c_result;
}

char const *SwigDirector_AxVoiceMessage::getParam(int index) const {
  char *c_result = 0 ;
  char * jresult = 0 ;
  int jindex  ;
  
  if (!swig_callbackgetParam) {
    throw Swig::DirectorPureVirtualException("AxVoiceMessage::getParam");
  } else {
    jindex = index;
    jresult = (char *) swig_callbackgetParam(jindex);
    c_result = (char *)jresult; 
  }
  return (char const *)c_result;
}

void SwigDirector_AxVoiceMessage::swig_connect_director(SWIG_Callback0_t callbackgetType, SWIG_Callback1_t callbackgetVoiceID, SWIG_Callback2_t callbackgetParamCounts, SWIG_Callback3_t callbackgetParam) {
  swig_callbackgetType = callbackgetType;
  swig_callbackgetVoiceID = callbackgetVoiceID;
  swig_callbackgetParamCounts = callbackgetParamCounts;
  swig_callbackgetParam = callbackgetParam;
}

void SwigDirector_AxVoiceMessage::swig_init_callbacks() {
  swig_callbackgetType = 0;
  swig_callbackgetVoiceID = 0;
  swig_callbackgetParamCounts = 0;
  swig_callbackgetParam = 0;
}

SwigDirector_AxVoiceCallback::SwigDirector_AxVoiceCallback() : AxVoiceCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AxVoiceCallback::~SwigDirector_AxVoiceCallback() {
  
}


void SwigDirector_AxVoiceCallback::onMessage(AxVoiceMessage const *message) {
  void * jmessage = 0 ;
  
  if (!swig_callbackonMessage) {
    throw Swig::DirectorPureVirtualException("AxVoiceCallback::onMessage");
  } else {
    jmessage = (void *) message; 
    swig_callbackonMessage(jmessage);
  }
}

void SwigDirector_AxVoiceCallback::swig_connect_director(SWIG_Callback0_t callbackonMessage) {
  swig_callbackonMessage = callbackonMessage;
}

void SwigDirector_AxVoiceCallback::swig_init_callbacks() {
  swig_callbackonMessage = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AxVoice_Init(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)AxVoice_Init((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AxVoice_BeginRecord() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)AxVoice_BeginRecord();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_CompleteRecord(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  AxVoice_CompleteRecord(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_UploadVoice(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  AxVoice_UploadVoice(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AxVoice_CreatVoice(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (char *)jarg1; 
  result = (unsigned int)AxVoice_CreatVoice((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_DownloadVoice(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  AxVoice_DownloadVoice(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_PlayVoice(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  AxVoice_PlayVoice(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_StopVoice() {
  AxVoice_StopVoice();
}


SWIGEXPORT int SWIGSTDCALL CSharp_AxVoiceMessage_getType(void * jarg1) {
  int jresult ;
  AxVoiceMessage *arg1 = (AxVoiceMessage *) 0 ;
  AxVoiceMessage::Type result;
  
  arg1 = (AxVoiceMessage *)jarg1; 
  result = (AxVoiceMessage::Type)((AxVoiceMessage const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AxVoiceMessage_getVoiceID(void * jarg1) {
  unsigned int jresult ;
  AxVoiceMessage *arg1 = (AxVoiceMessage *) 0 ;
  unsigned int result;
  
  arg1 = (AxVoiceMessage *)jarg1; 
  result = (unsigned int)((AxVoiceMessage const *)arg1)->getVoiceID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AxVoiceMessage_getParamCounts(void * jarg1) {
  int jresult ;
  AxVoiceMessage *arg1 = (AxVoiceMessage *) 0 ;
  int result;
  
  arg1 = (AxVoiceMessage *)jarg1; 
  result = (int)((AxVoiceMessage const *)arg1)->getParamCounts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AxVoiceMessage_getParam(void * jarg1, int jarg2) {
  char * jresult ;
  AxVoiceMessage *arg1 = (AxVoiceMessage *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (AxVoiceMessage *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((AxVoiceMessage const *)arg1)->getParam(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AxVoiceMessage() {
  void * jresult ;
  AxVoiceMessage *result = 0 ;
  
  result = (AxVoiceMessage *)new SwigDirector_AxVoiceMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AxVoiceMessage(void * jarg1) {
  AxVoiceMessage *arg1 = (AxVoiceMessage *) 0 ;
  
  arg1 = (AxVoiceMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoiceMessage_director_connect(void *objarg, SwigDirector_AxVoiceMessage::SWIG_Callback0_t callback0, SwigDirector_AxVoiceMessage::SWIG_Callback1_t callback1, SwigDirector_AxVoiceMessage::SWIG_Callback2_t callback2, SwigDirector_AxVoiceMessage::SWIG_Callback3_t callback3) {
  AxVoiceMessage *obj = (AxVoiceMessage *)objarg;
  SwigDirector_AxVoiceMessage *director = dynamic_cast<SwigDirector_AxVoiceMessage *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AxVoiceCallback(void * jarg1) {
  AxVoiceCallback *arg1 = (AxVoiceCallback *) 0 ;
  
  arg1 = (AxVoiceCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoiceCallback_onMessage(void * jarg1, void * jarg2) {
  AxVoiceCallback *arg1 = (AxVoiceCallback *) 0 ;
  AxVoiceMessage *arg2 = (AxVoiceMessage *) 0 ;
  
  arg1 = (AxVoiceCallback *)jarg1; 
  arg2 = (AxVoiceMessage *)jarg2; 
  (arg1)->onMessage((AxVoiceMessage const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AxVoiceCallback() {
  void * jresult ;
  AxVoiceCallback *result = 0 ;
  
  result = (AxVoiceCallback *)new SwigDirector_AxVoiceCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoiceCallback_director_connect(void *objarg, SwigDirector_AxVoiceCallback::SWIG_Callback0_t callback0) {
  AxVoiceCallback *obj = (AxVoiceCallback *)objarg;
  SwigDirector_AxVoiceCallback *director = dynamic_cast<SwigDirector_AxVoiceCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AxVoice_DispatchMessage(void * jarg1) {
  AxVoiceCallback *arg1 = (AxVoiceCallback *) 0 ;
  
  arg1 = (AxVoiceCallback *)jarg1; 
  AxVoice_DispatchMessage(arg1);
}


#ifdef __cplusplus
}
#endif

