/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
#if UNITY_IPHONE || UNITY_ANDROID
#else
namespace com.axia {

public class AxVoiceCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AxVoiceCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AxVoiceCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AxVoiceCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          axvoicePINVOKE.delete_AxVoiceCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void onMessage(AxVoiceMessage message) {
    axvoicePINVOKE.AxVoiceCallback_onMessage(swigCPtr, AxVoiceMessage.getCPtr(message));
  }

  public AxVoiceCallback() : this(axvoicePINVOKE.new_AxVoiceCallback(), true) {
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onMessage", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateAxVoiceCallback_0(SwigDirectoronMessage);
    axvoicePINVOKE.AxVoiceCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(AxVoiceCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectoronMessage(global::System.IntPtr message) {
    onMessage((message == global::System.IntPtr.Zero) ? null : new AxVoiceMessage(message, false));
  }

  public delegate void SwigDelegateAxVoiceCallback_0(global::System.IntPtr message);

  private SwigDelegateAxVoiceCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(AxVoiceMessage) };
}

}
#endif
